// Code generated by Kitex v0.13.1. DO NOT EDIT.

package scrapingservice

import (
	"context"
	scraping "github.com/For-December/trader_idl/gen_go/scraping_go/kitex_gen/scraping"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	Echo(ctx context.Context, message string, callOptions ...callopt.Option) (r string, err error)
	GetBtcPrice(ctx context.Context, startTime int64, endTime int64, interval string, callOptions ...callopt.Option) (r []*scraping.PriceData, err error)
	GetSocialMediaData(ctx context.Context, keyword string, startTime int64, endTime int64, limit int32, callOptions ...callopt.Option) (r []*scraping.TextData, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfoForClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kScrapingServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kScrapingServiceClient struct {
	*kClient
}

func (p *kScrapingServiceClient) Echo(ctx context.Context, message string, callOptions ...callopt.Option) (r string, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Echo(ctx, message)
}

func (p *kScrapingServiceClient) GetBtcPrice(ctx context.Context, startTime int64, endTime int64, interval string, callOptions ...callopt.Option) (r []*scraping.PriceData, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetBtcPrice(ctx, startTime, endTime, interval)
}

func (p *kScrapingServiceClient) GetSocialMediaData(ctx context.Context, keyword string, startTime int64, endTime int64, limit int32, callOptions ...callopt.Option) (r []*scraping.TextData, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetSocialMediaData(ctx, keyword, startTime, endTime, limit)
}
