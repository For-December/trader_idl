// Code generated by Kitex v0.13.1. DO NOT EDIT.

package scrapingservice

import (
	"context"
	"errors"
	scraping "github.com/For-December/trader_idl/gen_go/scraping_go/kitex_gen/scraping"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"Echo": kitex.NewMethodInfo(
		echoHandler,
		newScrapingServiceEchoArgs,
		newScrapingServiceEchoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetBtcPrice": kitex.NewMethodInfo(
		getBtcPriceHandler,
		newScrapingServiceGetBtcPriceArgs,
		newScrapingServiceGetBtcPriceResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetSocialMediaData": kitex.NewMethodInfo(
		getSocialMediaDataHandler,
		newScrapingServiceGetSocialMediaDataArgs,
		newScrapingServiceGetSocialMediaDataResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	scrapingServiceServiceInfo                = NewServiceInfo()
	scrapingServiceServiceInfoForClient       = NewServiceInfoForClient()
	scrapingServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return scrapingServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return scrapingServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return scrapingServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "ScrapingService"
	handlerType := (*scraping.ScrapingService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "scraping",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.13.1",
		Extra:           extra,
	}
	return svcInfo
}

func echoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*scraping.ScrapingServiceEchoArgs)
	realResult := result.(*scraping.ScrapingServiceEchoResult)
	success, err := handler.(scraping.ScrapingService).Echo(ctx, realArg.Message)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newScrapingServiceEchoArgs() interface{} {
	return scraping.NewScrapingServiceEchoArgs()
}

func newScrapingServiceEchoResult() interface{} {
	return scraping.NewScrapingServiceEchoResult()
}

func getBtcPriceHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*scraping.ScrapingServiceGetBtcPriceArgs)
	realResult := result.(*scraping.ScrapingServiceGetBtcPriceResult)
	success, err := handler.(scraping.ScrapingService).GetBtcPrice(ctx, realArg.StartTime, realArg.EndTime, realArg.Interval)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newScrapingServiceGetBtcPriceArgs() interface{} {
	return scraping.NewScrapingServiceGetBtcPriceArgs()
}

func newScrapingServiceGetBtcPriceResult() interface{} {
	return scraping.NewScrapingServiceGetBtcPriceResult()
}

func getSocialMediaDataHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*scraping.ScrapingServiceGetSocialMediaDataArgs)
	realResult := result.(*scraping.ScrapingServiceGetSocialMediaDataResult)
	success, err := handler.(scraping.ScrapingService).GetSocialMediaData(ctx, realArg.Keyword, realArg.StartTime, realArg.EndTime, realArg.Limit)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newScrapingServiceGetSocialMediaDataArgs() interface{} {
	return scraping.NewScrapingServiceGetSocialMediaDataArgs()
}

func newScrapingServiceGetSocialMediaDataResult() interface{} {
	return scraping.NewScrapingServiceGetSocialMediaDataResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Echo(ctx context.Context, message string) (r string, err error) {
	var _args scraping.ScrapingServiceEchoArgs
	_args.Message = message
	var _result scraping.ScrapingServiceEchoResult
	if err = p.c.Call(ctx, "Echo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetBtcPrice(ctx context.Context, startTime int64, endTime int64, interval string) (r []*scraping.PriceData, err error) {
	var _args scraping.ScrapingServiceGetBtcPriceArgs
	_args.StartTime = startTime
	_args.EndTime = endTime
	_args.Interval = interval
	var _result scraping.ScrapingServiceGetBtcPriceResult
	if err = p.c.Call(ctx, "GetBtcPrice", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetSocialMediaData(ctx context.Context, keyword string, startTime int64, endTime int64, limit int32) (r []*scraping.TextData, err error) {
	var _args scraping.ScrapingServiceGetSocialMediaDataArgs
	_args.Keyword = keyword
	_args.StartTime = startTime
	_args.EndTime = endTime
	_args.Limit = limit
	var _result scraping.ScrapingServiceGetSocialMediaDataResult
	if err = p.c.Call(ctx, "GetSocialMediaData", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
